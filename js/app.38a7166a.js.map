{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/components/Map.vue?b743","webpack:///./src/components/BusinessHourDisp.vue?4e34","webpack:///./src/components/TestChart.vue?0104","webpack:///./src/App.vue","webpack:///./src/components/Map.vue?a6a0","webpack:///./src/components/Map.vue","webpack:///./src/components/Map.vue?ac7d","webpack:///./src/components/TestChart.vue?d5c9","webpack:///./src/components/TestChart.vue","webpack:///./src/components/TestChart.vue?bbb4","webpack:///./src/components/BusinessHourDisp.vue","webpack:///./src/components/BusinessHourDisp.vue?a05e","webpack:///./src/App.vue?8ecf","webpack:///./src/main.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","class","updateOpenBldgId","tgtBldgId","getTgtBldgId","selectBldgids","bldgIdFromMap","uploadBldgId1","highlightBldgIds","highlightBldgIdsFromApp","tgtBldgIds","tgtBldgIdsFromApp","id","_ctx","_cache","$props","$setup","$data","$options","emits","props","Array","setup","context","debug","BuildingInfo","parseInt","BuildingID","state","count","increment","emit","accessToken","map","Map","container","style","center","setting","map_center","zoom","maxZoom","antialias","hideBldgIds","bldgList","bldg","concat","bldgIds","firstFlg","UpdateHighlightBuildings","setFilter","on","labelLayerId","addLayer","color","highlightBuildings","selectedBuilding","relatedBuildings","notRelatedBuilding","self_camera","self_scene","self_map","self_renderer","modelOrigin","floatList","modelAltitude","modelRotate","Math","PI","modelAsMercatorCoordinate","MercatorCoordinate","fromLngLat","modelTransform","translateX","x","translateY","y","translateZ","z","rotateX","rotateY","rotateZ","scale","meterInMercatorCoordinateUnits","arrayKingyoObj","customLayer","type","renderingMode","onAdd","gl","directionalLight","position","set","normalize","add","directionalLight2","onProgress","e","lengthComputable","percentComplete","loaded","total","console","log","onError","xhr","error","loadKingyoObjFromObj","folderPath","mtlPath","objPath","pos","scaleNum","mtlLoader","setPath","load","materials","preload","objLoader","setMaterials","loadKingyoFbxFromObj","fbxPath","fbxLoader","MTLLoader","OBJLoader","FBXLoader","float","filePath","alert","canvas","getCanvas","autoClear","render","matrix","rotationX","makeRotationAxis","rotationY","rotationZ","fromArray","makeTranslation","multiply","projectionMatrix","resetState","requestAnimationFrame","forEach","elm","updateKingyoPos","triggerRepaint","kingyoObj","date","Date","switchBackFlg","round","getMinutes","confPosX","confPosZ","rotation","switchBackVal","random","createBldgLayer","fileType","layerName","fileName","rotDeg","loader","GLTFLoader","gltf","scene","lnglat","createGeojsonBldgLayer","addSource","geojsonPath","isCreateGeojsonBldgLayer","bbox","Point","point","selectedFeatures","queryRenderedFeatures","layers","ids","feature","tempSelectBldgids","idx","tmpBldgId","undefined","toString","String","__exports__","_component_BarChart","bldgName","bldgAddress","onClick","showWebPage","chartData","barData","Timedat","ppldat","register","components","BarChart","created","labels","datasets","label","backgroundColor","bldgInfoUrl","getBldgName","buildingId","Name","getBldgAddress","Address","getBldgInfoUrl","InfoUrl","createBarChartData","Space","PeopleCount","Time","Number","TimeValue","rtnBarData","open","GetStartTime","$event","GetEndTime","startTime","endTime","target","TestFunction","BusinessStartTime","BusinessEndTime","count1","totalcount","bldgId","TestChart","BusinessHour","methods","add1","this","openBldgId","uploadBldgId","app","App","mount"],"mappings":"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","file":"js/app.38a7166a.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/map_publish1/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader-v16/dist/index.js??ref--1-1!./Map.vue?vue&type=style&index=0&id=240df5f9&scoped=true&lang=css\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader-v16/dist/index.js??ref--1-1!./BusinessHourDisp.vue?vue&type=style&index=0&id=093dfefa&scoped=true&lang=css\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader-v16/dist/index.js??ref--1-1!./TestChart.vue?vue&type=style&index=0&id=4a85d836&scoped=true&lang=css\"","<template>\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n      <div class = \"col-3\">\n        <BusinessHour @openBldgId=\"updateOpenBldgId\" :tgtBldgId=\"getTgtBldgId\"></BusinessHour>\n        <TestChart :selectBldgids=\"bldgIdFromMap\"></TestChart>\n      </div>\n      <div class = \"col-9\">\n        <Map @uploadBldgId=\"uploadBldgId1\" :highlightBldgIds=\"highlightBldgIdsFromApp\" :tgtBldgIds=\"tgtBldgIdsFromApp\"></Map>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n// import Body from './components/Body.vue'\nimport Map from './components/Map.vue'\nimport TestChart from './components/TestChart.vue'\nimport BusinessHour from './components/BusinessHourDisp.vue'\n\nexport default {\n  data(){\n    return{\n      count1:0,\n      totalcount:0,\n      bldgIdFromMap:\"\",\n      highlightBldgIdsFromApp:[],//(1)ダミーデータ：ハイライト表示する建物のIDのリストが渡ってくる\n      tgtBldgIdsFromApp:[],\n      bldgId:'99999'\n    }\n  },\n  components:{\n    Map,\n    TestChart,\n    BusinessHour\n  },\n  methods:{\n    add1(count){\n      this.count1 = count;\n      this.totalcount += count; \n    },\n    updateOpenBldgId(openBldgId){\n      this.highlightBldgIdsFromApp = openBldgId;\n    },\n    getTgtBldgId(tgtBldgId){\n      this.tgtBldgIdsFromApp = tgtBldgId;\n      alert(tgtBldgId)\n    },\n    uploadBldgId1(uploadBldgId){\n      this.bldgIdFromMap = uploadBldgId;\n    }\n  }\n}\n</script>\n","import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-240df5f9\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", { id: \"map\" }, null, -1))\nconst _hoisted_2 = [\n  _hoisted_1\n]\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createElementBlock(\"div\", null, _hoisted_2))\n}","\r\n//設定ファイルの読み込み\r\nimport setting from '../assets/setting.json';//一般設定\r\nimport floatList from '../assets/floatList.json';//フロートの一覧（読み込みファイルなど）\r\nimport bldgList from '../assets/bldgList.json';//建物データの一覧（読み込みファイルなど）\r\n\r\nimport data from '../assets/TestData.json';\r\nimport mapboxgl,{ ErrorEvent } from 'mapbox-gl';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\n\r\nimport { defineComponent, onMounted, reactive, toRefs, watch, ref, effect } from 'vue';\r\n//three.jsのコンポーネントをインストール\r\nimport * as THREE from 'three';\r\n//import {THREE} from 'three'\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\r\nimport { MTLLoader } from 'three/examples/jsm/loaders/MTLLoader';\r\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';\r\nimport { FBXLoader } from 'three/examples/jsm/loaders/FBXLoader';\r\nimport { DDSLoader } from 'three/examples/jsm/loaders/DDSLoader';\r\n\r\nexport default defineComponent({\r\n    /*\r\n    method(){\r\n        increment(){\r\n            this.count += 1;\r\n            this.$emit(\"add\", this.count);\r\n        }\r\n    },\r\n    */\r\n    emits:['add','uploadBldgId'],\r\n    name: 'HelloWorld',\r\n    props: {\r\n        //(1)ハイライト表示する建物のIDのリストが渡ってくる\r\n        highlightBldgIds:Array,\r\n    },\r\n    setup(props, context) {\r\n        //作業用フラグ（建物IDなど調べるとき）\r\n        var debug = true;\r\n\r\n        const tgtBldgIds: Array<number> = [];\r\n        for (const i in data.BuildingInfo){\r\n            var tgtBldgId = parseInt(data.BuildingInfo[i].BuildingID);\r\n            tgtBldgIds.push(tgtBldgId);//すべての建物が選択できる。\r\n        }\r\n\r\n        //data定義\r\n        const state = reactive<{selectBldgids: Array<string>, count: number}>({\r\n            selectBldgids: [],//(2)選択した建物ID（選択表示と、別コンポーネントへ伝達）\r\n            count: 0\r\n        });\r\n        \r\n        //method定義\r\n        const increment = () =>{\r\n            state.count = state.count + 1;\r\n            context.emit('add', state.count);\r\n        }\r\n\r\n        onMounted(() => {\r\n            //mapboxのアクセストークンをセット\r\n            mapboxgl.accessToken = 'pk.eyJ1Ijoia2F0b3NodW4iLCJhIjoiY2t0eWVjN3dvMDlzbjJub3c2YndiZTJvNiJ9.GbIeJ78HgWKX6sh2mKy2pA';\r\n            \r\n            //mapを定義\r\n            const map = new mapboxgl.Map({\r\n                container: 'map',\r\n                style: 'mapbox://styles/mapbox/light-v10',\r\n                center: setting.map_center,\r\n                zoom: 17,\r\n                maxZoom: 21,\r\n                antialias: true, // create the gl context with MSAA antialiasing, so custom layers are antialiased\r\n            });\r\n\r\n            //非表示にする建物のIDのリスト\r\n            var hideBldgIds:number[] = setting.hideBldgIds;\r\n            //bldgListの建物IDを非表示対象に追加する。\r\n            for(var i in bldgList.data){\r\n                var bldg = bldgList.data[i];\r\n                //配列に追加\r\n                hideBldgIds = hideBldgIds.concat(bldg.bldgIds);\r\n            }\r\n\r\n            interface Pointlike {\r\n                x: number;\r\n                y: number;\r\n            }\r\n\r\n            var firstFlg = true\r\n\r\n            //監視関数の設定\r\n            const {highlightBldgIds} = toRefs(props);\r\n            // const {tgtBldgIds} = toRefs(props);\r\n            watch(highlightBldgIds, () =>{\r\n                //ダミー処理定義（ToDo：map.setFilterの処理を関数化し、ここから呼ぶように集約する）\r\n                //alert(\"[変更検知]ダミー処理：Map.vue:highlightBldgIds=\" + props.highlightBldgIds)\r\n            });\r\n            effect(() => {\r\n                //ダミー処理定義（ToDo：map.setFilterの処理を関数化し、ここから呼ぶように集約する）\r\n                // alert(\"[変更検知]ダミー処理：Map.vue:highlightBldgIds=\" + props.highlightBldgIds)\r\n                // alert(\"[変更検知]ダミー処理：Map.vue:selectBldgids=\" + state.selectBldgids)\r\n                // この機能が動けるため「dummy」の変数を「props.highlightBldgIds」の値を持たせた\r\n                var dummy = props.highlightBldgIds;\r\n                UpdateHighlightBuildings()\r\n            })\r\n\r\n            //イベントの追加（建物ボリュームの読み込み）\r\n            map.on('load', () => {\r\n                // Insert the layer beneath any symbol layer.\r\n                //let layers = map.getStyle().getLaysers();\r\n                /*\r\n                let layers = map.getStyle()['layers'];//11/15 ←のエラーが消えない\r\n                //const styletest = map.getStyle();\r\n                let labelLayerId = '';\r\n                if(layers != undefined){\r\n                    labelLayerId = layers.find(\r\n                    (layer) => layer.type === 'symbol' && layer.layout['text-field']\r\n                    ).id;\r\n                }\r\n                */\r\n               const labelLayerId = 'road-label';\r\n                \r\n                //レイヤー１：親コンポーネントからセットされたハイライト建物//\r\n                map.addLayer({\r\n                    'id': 'main-buildings',\r\n                    'source': 'composite',\r\n                    'source-layer': 'building',\r\n                    'filter': [\r\n                        'all',\r\n                        ['==', 'extrude', 'true'],\r\n                        ['>', 'height', 0],\r\n                        ['!in', '$id', ...hideBldgIds], //非表示建物は表示しない。\r\n                        ['in', '$id', ...(props.highlightBldgIds as Array<number>)] //ハイライト建物を対象にする。\r\n                    ],\r\n                    'type': 'fill-extrusion',\r\n                    'minzoom': 15,\r\n                    'paint': {\r\n                        'fill-extrusion-color': setting.color.highlightBuildings,\r\n                        'fill-extrusion-height': [\"number\", [\"get\", \"height\"], 5],\r\n                        'fill-extrusion-base': [\"number\", [\"get\", \"min_height\"], 0],\r\n                        'fill-extrusion-opacity': 0.6\r\n                    }\r\n                },\r\n                labelLayerId);\r\n\r\n                //レイヤー２：親コンポーネントからセットされたハイライト建物（選択状態）//\r\n                map.addLayer({\t\r\n                    \"id\": \"selected-main-building\",\r\n                    \"source\": \"composite\",\r\n                    'source-layer': 'building',\r\n                    'type': 'fill-extrusion',\r\n                    'paint': {\r\n                        'fill-extrusion-color': setting.color.selectedBuilding,\r\n                        'fill-extrusion-height': [\"number\", [\"get\", \"height\"], 5],\r\n                        'fill-extrusion-base': [\"number\", [\"get\", \"min_height\"], 0],\r\n                        'fill-extrusion-opacity': 0.6\r\n                    },\r\n                    'filter': ['in', '$id', '']\r\n                }, labelLayerId);\r\n\r\n                //レイヤー３：ハイライト建物以外の周辺建物//\r\n                map.addLayer({\r\n                    'id': 'other-buildings',\r\n                    'source': 'composite',\r\n                    'source-layer': 'building',\r\n                    'filter': [\r\n                        'all',\r\n                        ['==', 'extrude', 'true'],\r\n                        ['>', 'height', 0],\r\n                        ['!in', '$id', ...hideBldgIds],\r\n                        ['!in', '$id', ...(props.highlightBldgIds as Array<number>)], //ハイライト建物を対象にする。\r\n                        ['in', '$id', ...(tgtBldgIds as Array<number>)]\r\n                    ],\r\n                    'type': 'fill-extrusion',\r\n                    'minzoom': 15,\r\n                    'paint': {\r\n                        'fill-extrusion-color': setting.color.relatedBuildings,\r\n                        'fill-extrusion-height': [\"number\", [\"get\", \"height\"], 5],\r\n                        'fill-extrusion-base': [\"number\", [\"get\", \"min_height\"], 0],\r\n                        'fill-extrusion-opacity': 0.6\r\n                    }\r\n                },\r\n                labelLayerId);\r\n\r\n                //レイヤー４：ハイライト建物以外の周辺建物（選択状態）//\r\n                map.addLayer({\t\r\n                    \"id\": \"selected-other-building\",\r\n                    \"source\": \"composite\",\r\n                    'source-layer': 'building',\r\n                    'type': 'fill-extrusion',\r\n                    'paint': {\r\n                        'fill-extrusion-color': setting.color.selectedBuilding,\r\n                        'fill-extrusion-height': [\"number\", [\"get\", \"height\"], 5],\r\n                        'fill-extrusion-base': [\"number\", [\"get\", \"min_height\"], 0],\r\n                        'fill-extrusion-opacity': 0.6\r\n                    },\r\n                    'filter': ['in', '$id', '']\r\n                }, labelLayerId);\r\n\r\n                //レイヤー5：ハイライト建物以外の周辺建物（選択状態）//\r\n                map.addLayer({\t\r\n                    \"id\": \"not-related-building\",\r\n                    \"source\": \"composite\",\r\n                    'source-layer': 'building',\r\n                    'type': 'fill-extrusion',\r\n                    'filter': [\r\n                        'all',\r\n                        ['==', 'extrude', 'true'],\r\n                        ['>', 'height', 0],\r\n                        ['!in', '$id', ...hideBldgIds],\r\n                        ['!in', '$id', ...(props.highlightBldgIds as Array<number>)], //ハイライト建物を対象にする。\r\n                        ['!in', '$id', ...(tgtBldgIds as Array<number>)]\r\n                    ],\r\n                    'paint': {\r\n                        'fill-extrusion-color': setting.color.notRelatedBuilding,\r\n                        'fill-extrusion-height': [\"number\", [\"get\", \"height\"], 5],\r\n                        'fill-extrusion-base': [\"number\", [\"get\", \"min_height\"], 0],\r\n                        'fill-extrusion-opacity': 0.6\r\n                    },\r\n                }, labelLayerId);\r\n\r\n                //金魚の表示------------------start\r\n                //(1)glTFを読み込む\r\n                    //参考HP\r\n                    //https://docs.mapbox.com/jp/mapbox-gl-js/example/add-3d-model/\r\n                    // parameters to ensure the model is georeferenced correctly on the map\r\n                    const modelOrigin:mapboxgl.LngLatLike = floatList.modelOrigin;\r\n                    const modelAltitude = floatList.modelAltitude;\r\n                    const modelRotate = [\r\n                        0 * (Math.PI / 2), \r\n                        0 * (Math.PI / 2), \r\n                        0 * (Math.PI / 2)\r\n                    ];\r\n\r\n                    const modelAsMercatorCoordinate = mapboxgl.MercatorCoordinate.fromLngLat(\r\n                        modelOrigin,\r\n                        modelAltitude\r\n                    );\r\n\r\n                    // transformation parameters to position, rotate and scale the 3D model onto the map\r\n                    const modelTransform = {\r\n                        translateX: modelAsMercatorCoordinate.x,\r\n                        translateY: modelAsMercatorCoordinate.y,\r\n                        translateZ: modelAsMercatorCoordinate.z,\r\n                        rotateX: modelRotate[0],\r\n                        rotateY: modelRotate[1],\r\n                        rotateZ: modelRotate[2],\r\n                        /* Since the 3D model is in real world meters, a scale transform needs to be\r\n                        * applied since the CustomLayerInterface expects units in MercatorCoordinates.\r\n                        */\r\n                        scale: modelAsMercatorCoordinate.meterInMercatorCoordinateUnits()\r\n                    };\r\n\r\n                    //コンポーネントをimportしているので不要と判断\r\n                    //const THREE = window.THREE;\r\n\r\n                    //customLayerで用いるmapbox,three.jsのオブジェクト(ToDoオブジェクト定義を修正)\r\n                    /*\r\n                    var customLayerInfo = {\r\n                        camera : new THREE.Camera(),\r\n                        scene : new THREE.Scene(),\r\n                        map : new mapboxgl.Map(),\r\n                        renderer : new THREE.WebGLRenderer(),\r\n                    }*/\r\n                    var self_camera:THREE.Camera;\r\n                    var self_scene:THREE.Scene;\r\n                    var self_map:mapboxgl.Map;\r\n                    var self_renderer:THREE.WebGLRenderer;\r\n                    //金魚オブジェクト\r\n                    var arrayKingyoObj:Array<THREE.Object3D> = [];\r\n\r\n                    // configuration of the custom layer for a 3D model per the CustomLayerInterface\r\n                    const customLayer:mapboxgl.AnyLayer = {\r\n                        id: 'kingyo',\r\n                        type: 'custom',\r\n                        renderingMode: '3d',\r\n\r\n                        onAdd: function (map:mapboxgl.Map, gl:WebGLRenderingContext) {\r\n                            //customLayerInfoの変数に集約\r\n                            //this.camera = new THREE.Camera();\r\n                            //this.scene = new THREE.Scene();\r\n                            self_camera = new THREE.Camera();\r\n                            self_scene = new THREE.Scene();\r\n\r\n                            // create two three.js lights to illuminate the model\r\n                            const directionalLight = new THREE.DirectionalLight(0xffffff);\r\n                            directionalLight.position.set(0, -70, 100).normalize();\r\n                            //customLayerInfoの変数に集約\r\n                            //this.scene.add(directionalLight);\r\n                            self_scene.add(directionalLight);\r\n\r\n                            const directionalLight2 = new THREE.DirectionalLight(0xffffff);\r\n                            directionalLight2.position.set(0, 70, 100).normalize();\r\n                            //customLayerInfoの変数に集約\r\n                            //this.scene.add(directionalLight2);\r\n                            self_scene.add(directionalLight2);\r\n\r\n                            /* GLTFLoaderからobjLoaderに変更\r\n\r\n                            // use the three.js GLTF loader to add the 3D model to the three.js scene\r\n                            //const loader = new THREE.GLTFLoader();\r\n                            const loader = new GLTFLoader();//inportしているコンポーネントをそのまま使う。\r\n                            loader.load(\r\n                                //'https://docs.mapbox.com/mapbox-gl-js/assets/34M_17/34M_17.gltf',\r\n                                //'http://127.0.0.1:5000/asset/34M_17.gltf',\r\n                                'http://localhost:8080/assets/antenna/34M_17.gltf',\r\n                                (gltf) => {\r\n                                    //customLayerInfoの変数に集約\r\n                                    //this.scene.add(gltf.scene);\r\n                                    self_scene.add(gltf.scene);\r\n                                }\r\n                            );\r\n                            */\r\n\r\n                            //金魚のobjのload------start\r\n                            // model\r\n\r\n                            var onProgress = function ( e:ProgressEvent ) {\r\n                                if ( e.lengthComputable ) {\r\n                                    var percentComplete = e.loaded / e.total * 100;\r\n                                    //console.log( Math.round(percentComplete, 2) + '% downloaded' );\r\n                                    console.log( percentComplete + '% downloaded' );\r\n                                }\r\n                            };\r\n\r\n                            /*var onError = function ( event:ErrorEvent ):void { \r\n                                //console.error('obj load error!');\r\n                            };*/\r\n                            var onError = function ( xhr:any ) { \r\n                                console.error('obj loader error!');\r\n                            };\r\n\r\n                            /**\r\n                             * 金魚オブジェクトをobjファイルからロード\r\n                             * {String} folderPath obj・mtlファイルのフォルダのパス\r\n                             * {String} mtlPath mtlファイルのパス\r\n                             * {String} objPath objファイルのパス\r\n                             * {THREE.Vector3} pos オブジェクトの相対座標\r\n                             * {number} scale オブジェクトのスケール補正\r\n                             */\r\n                            function loadKingyoObjFromObj(folderPath:string,mtlPath:string, objPath:string, pos:THREE.Vector3, scaleNum:number) {\r\n                                mtlLoader.setPath( folderPath );\r\n                                mtlLoader.load( mtlPath, function( materials ) {\r\n\r\n                                    materials.preload();\r\n\r\n                                    //var objLoader = new THREE.OBJLoader();\r\n                                    //var objLoader = new OBJLoader();\r\n                                    objLoader.setMaterials( materials );\r\n                                    objLoader.setPath( folderPath );\r\n                                    //objLoader.load( 'male02.obj', function ( object ) {\r\n                                    objLoader.load( objPath, function ( object:THREE.Object3D ) {\r\n\r\n                                        //座標を設定\r\n                                        object.position.x = pos.x;\r\n                                        object.position.y = pos.y;\r\n                                        object.position.z = pos.z;\r\n                                        //縮尺を設定\r\n                                        object.scale.x = scaleNum;\r\n                                        object.scale.y = scaleNum;\r\n                                        object.scale.z = scaleNum;\r\n\r\n                                        self_scene.add( object );\r\n\r\n                                        //金魚オブジェクトを保持\r\n                                        arrayKingyoObj.push(object);\r\n\r\n                                    }, onProgress, onError );\r\n\r\n                                });\r\n                            }\r\n\r\n                            /**\r\n                             * 金魚オブジェクトをfbxファイルからロード\r\n                             * {String} folderPath fbxファイルのフォルダのパス\r\n                             * {String} fbxPath fbxファイルのパス\r\n                             * {THREE.Vector3} pos オブジェクトの相対座標\r\n                             * {number} scale オブジェクトのスケール補正\r\n                             */\r\n                            function loadKingyoFbxFromObj(folderPath:string, fbxPath:string, pos:THREE.Vector3, scaleNum:number) {\r\n                                fbxLoader.setPath( folderPath );\r\n                                fbxLoader.load( fbxPath, function ( object:THREE.Object3D ) {\r\n\r\n                                    object.position.x = pos.x ;\r\n                                    object.position.y = pos.y ;\r\n                                    object.position.z = pos.z ;\r\n                                    //縮尺\r\n                                    object.scale.x = scaleNum;\r\n                                    object.scale.y = scaleNum;\r\n                                    object.scale.z = scaleNum;\r\n\r\n                                    //scene.add( object );\r\n                                    self_scene.add( object );\r\n\r\n                                    //金魚オブジェクトを保持\r\n                                    arrayKingyoObj.push(object);\r\n\r\n                                }, onProgress, onError );\r\n                            }\r\n\r\n                            //ローダーを生成\r\n                            var mtlLoader = new MTLLoader();\r\n                            var objLoader = new OBJLoader();\r\n                            var fbxLoader = new FBXLoader();\r\n\r\n                            //金魚を読み込み（floatList.jsonから）\r\n                            for(var i in floatList.data){\r\n                                var float = floatList.data[i];\r\n                                if(float.type == \"obj\"){//objの場合\r\n                                    loadKingyoObjFromObj(float.folderPath, (float.mtlPath as string), float.filePath, new THREE.Vector3(float.pos.x,float.pos.y,float.pos.z), float.scaleNum);\r\n                                }else if(float.type == \"fbx\"){//fbxの場合\r\n                                    loadKingyoFbxFromObj(float.folderPath, float.filePath, new THREE.Vector3(float.pos.x,float.pos.y,float.pos.z), float.scaleNum);\r\n                                }else{\r\n                                    alert('floatList.jsonに対象外のタイプのファイル定義があります');\r\n                                }\r\n                            }\r\n\r\n                            //金魚のobjのload------end\r\n\r\n\r\n                            //customLayerInfoの変数に集約\r\n                            //this.map = map;\r\n                            self_map = map;\r\n\r\n                            // use the Mapbox GL JS map canvas for three.js\r\n                            //customLayerInfoの変数に集約\r\n                            //this.renderer = new THREE.WebGLRenderer({\r\n                            self_renderer = new THREE.WebGLRenderer({\r\n                                canvas: map.getCanvas(),\r\n                                context: gl,\r\n                                antialias: true\r\n                            });\r\n\r\n                            //customLayerInfoの変数に集約\r\n                            //this.renderer.autoClear = false;\r\n                            self_renderer.autoClear = false;\r\n                        },\r\n                        render: function (gl:WebGLRenderingContext, matrix:number[]) {\r\n                            const rotationX = new THREE.Matrix4().makeRotationAxis(\r\n                                new THREE.Vector3(1, 0, 0),\r\n                                modelTransform.rotateX\r\n                            );\r\n                            const rotationY = new THREE.Matrix4().makeRotationAxis(\r\n                                new THREE.Vector3(0, 1, 0),\r\n                                modelTransform.rotateY\r\n                            );\r\n                            const rotationZ = new THREE.Matrix4().makeRotationAxis(\r\n                                new THREE.Vector3(0, 0, 1),\r\n                                modelTransform.rotateZ\r\n                            );\r\n\r\n                            const m = new THREE.Matrix4().fromArray(matrix);\r\n                            const l = new THREE.Matrix4()\r\n                                .makeTranslation(\r\n                                    modelTransform.translateX,\r\n                                    modelTransform.translateY,\r\n                                    modelTransform.translateZ as number\r\n                                )\r\n                                .scale(\r\n                                    new THREE.Vector3(\r\n                                        modelTransform.scale,\r\n                                        -modelTransform.scale,\r\n                                        modelTransform.scale\r\n                                    )\r\n                                )\r\n                                .multiply(rotationX)\r\n                                .multiply(rotationY)\r\n                                .multiply(rotationZ);\r\n\r\n                            //customLayerInfoの変数に集約\r\n                            //this.camera.projectionMatrix = m.multiply(l);\r\n                            //this.renderer.resetState();\r\n                            //this.renderer.render(this.scene, this.camera);\r\n                            //this.map.triggerRepaint();\r\n                            self_camera.projectionMatrix = m.multiply(l);\r\n                            self_renderer.resetState();\r\n\r\n                            //金魚の動作にアニメーションをつける-------start\r\n                            // 次のフレームを要求\r\n                            //requestAnimationFrame(() => { this.render(); });\r\n                            requestAnimationFrame(() => { self_renderer; });\r\n\r\n                            // ちょっとずつ移動させる\r\n                            arrayKingyoObj.forEach(elm => {\r\n                                updateKingyoPos(elm);\r\n                            });\r\n\r\n                            //金魚の動作にアニメーションをつける-------end\r\n\r\n                            self_renderer.render(self_scene, self_camera);\r\n                            self_map.triggerRepaint();\r\n                        }\r\n                    };\r\n\r\n                    /** \r\n                     * 金魚をアニメーション動作する。\r\n                     * kingyoObj 更新対象のオブジェクト\r\n                    */\r\n                    function updateKingyoPos(kingyoObj:THREE.Object3D):void {\r\n                        //時間で動きを変える\r\n                        var date = new Date();//今日の日時を設定\r\n                        \r\n                        //1分単位で往復するようにする。\r\n                        var switchBackFlg = false;\r\n                        if(Math.round(date.getMinutes()) % 2 === 0){\r\n                            switchBackFlg = true;//偶数の場合はスイッチバックする。\r\n                        }\r\n\r\n                        //制御定数//\r\n                        //移動\r\n                        const confPosX = 2.0;\r\n                        const confPosY = 0.5;\r\n                        const confPosZ = 1.0;\r\n                        //回転\r\n                        const confRotX = 2.0;\r\n                        const confRotY = 0.5;\r\n                        const confRotZ = 1.0;\r\n                        \r\n                        //ランダムに動作する//\r\n                        //回転//\r\n                        //kingyoObj.rotation.x += confRotX * (0.5 - Math.random());\r\n                        //kingyoObj.rotation.y += confRotY * (0.5 - Math.random());\r\n                        //kingyoObj.rotation.z += confRotZ * (0.5 - Math.random());\r\n                        //振り向かせる\r\n                        if(!switchBackFlg){\r\n                            kingyoObj.rotation.z = 0;\r\n                        }else{\r\n                            kingyoObj.rotation.z = 2 * (Math.PI / 2);//反転\r\n                        }\r\n\r\n                        //移動//\r\n                        //振り返るか判断\r\n                        var switchBackVal = 1;\r\n                        if(switchBackFlg){\r\n                            switchBackVal = -1;\r\n                        }\r\n                        kingyoObj.position.x += switchBackVal * confPosX * (0.7 - Math.random());//進行方向を反転\r\n                        kingyoObj.position.z += confPosZ * (0.5 - Math.random());\r\n                    }\r\n\r\n                    //map.on('style.load', () => {\r\n                    //map.on('load', () => {\r\n                        map.addLayer(customLayer, 'waterway-label');\r\n                        //map.addLayer(customLayer, labelLayerId);\r\n                    //});\r\n\r\n\r\n                //金魚の表示------------------end\r\n\r\n                //レイヤー６（建物のgltfの表示）\r\n                /**\r\n                 * 建物のgltfを読み込んだレイヤーを生成\r\n                 * {string} fileType 読み込むファイル形式（ローダーを変える）\r\n                 * {mapboxgl.LngLatLike} modelOrigin モデルを配置する緯度経度\r\n                 * {string} layerName レイヤー名称\r\n                 * {string} folderPath フォルダのパス(スラッシュまでいれる)\r\n                 * {string} gltfFileName gltfのファイル名\r\n                 * {} scale 縮尺\r\n                 */\r\n                function createBldgLayer(\r\n                        fileType:string,\r\n                        modelOrigin:mapboxgl.LngLatLike,\r\n                        layerName:string,\r\n                        folderPath:string,\r\n                        fileName:string,\r\n                        scale:THREE.Vector3,\r\n                        rotDeg:number\r\n                    ) :void{\r\n                    \r\n                    //gltf,glb,fbx以外はアラートして処理しない\r\n                    if(!(fileType == \"gltf\" || fileType == \"glb\" || fileType == \"fbx\")){\r\n                        alert('createBldgLayer：読み込み対象外のファイル形式です：' + fileType);\r\n                        return;\r\n                    }\r\n\r\n                    //(1)glTFを読み込む\r\n                    //参考HP\r\n                    //https://docs.mapbox.com/jp/mapbox-gl-js/example/add-3d-model/\r\n                    // parameters to ensure the model is georeferenced correctly on the map\r\n                    const modelAltitude = 0;\r\n                    const modelRotate = [\r\n                        1 * (Math.PI / 2), \r\n                        0 * (Math.PI / 2), \r\n                        0 * (Math.PI / 2)\r\n                    ];\r\n\r\n                    const modelAsMercatorCoordinate = mapboxgl.MercatorCoordinate.fromLngLat(\r\n                        modelOrigin,\r\n                        modelAltitude\r\n                    );\r\n\r\n                    // transformation parameters to position, rotate and scale the 3D model onto the map\r\n                    const modelTransform = {\r\n                        translateX: modelAsMercatorCoordinate.x,\r\n                        translateY: modelAsMercatorCoordinate.y,\r\n                        translateZ: modelAsMercatorCoordinate.z,\r\n                        rotateX: modelRotate[0],\r\n                        rotateY: modelRotate[1],\r\n                        rotateZ: modelRotate[2],\r\n                        /* Since the 3D model is in real world meters, a scale transform needs to be\r\n                        * applied since the CustomLayerInterface expects units in MercatorCoordinates.\r\n                        */\r\n                        scale: modelAsMercatorCoordinate.meterInMercatorCoordinateUnits()\r\n                    };\r\n\r\n                    var self_camera:THREE.Camera;\r\n                    var self_scene:THREE.Scene;\r\n                    var self_map:mapboxgl.Map;\r\n                    var self_renderer:THREE.WebGLRenderer;\r\n \r\n                    // configuration of the custom layer for a 3D model per the CustomLayerInterface\r\n                    const customLayer:mapboxgl.AnyLayer = {\r\n                        id: layerName,\r\n                        type: 'custom',\r\n                        renderingMode: '3d',\r\n\r\n                        onAdd: function (map:mapboxgl.Map, gl:WebGLRenderingContext) {\r\n                            //customLayerInfoの変数に集約\r\n                            self_camera = new THREE.Camera();\r\n                            self_scene = new THREE.Scene();\r\n\r\n                            // create two three.js lights to illuminate the model\r\n                            const directionalLight = new THREE.DirectionalLight(0xffffff);\r\n                            directionalLight.position.set(0, -70, 100).normalize();\r\n                            //customLayerInfoの変数に集約\r\n                            self_scene.add(directionalLight);\r\n\r\n                            const directionalLight2 = new THREE.DirectionalLight(0xffffff);\r\n                            directionalLight2.position.set(0, 70, 100).normalize();\r\n                            //customLayerInfoの変数に集約\r\n                            self_scene.add(directionalLight2);\r\n\r\n                            //ローダーで使うエラー関数//\r\n                            var onProgress = function ( e:ProgressEvent ) {\r\n                                if ( e.lengthComputable ) {\r\n                                    var percentComplete = e.loaded / e.total * 100;\r\n                                    //console.log( Math.round(percentComplete, 2) + '% downloaded' );\r\n                                    console.log( percentComplete + '% downloaded' );\r\n                                }\r\n                            };\r\n\r\n                            /*var onError = function ( event:ErrorEvent ):void { \r\n                                //console.error('obj load error!');\r\n                            };*/\r\n                            var onError = function ( xhr:any ) { \r\n                                //console.error('obj loader error!');\r\n                                alert(fileType + ' loader error:' + xhr);\r\n                            };\r\n\r\n                            if(fileType == \"gltf\" || fileType == \"glb\"){\r\n                                //glbローダーで読み込む\r\n                                // use the three.js GLTF loader to add the 3D model to the three.js scene\r\n                                const loader = new GLTFLoader();//inportしているコンポーネントをそのまま使う。\r\n                                loader.load(\r\n                                    (folderPath + fileName),//GLTFのファイルパス\r\n                                    (gltf) => {\r\n                                        //回転(鉛直方向の時計回りにrotDeg回転)\r\n                                        gltf.scene.rotation.y = (rotDeg / 90) * (Math.PI / 2),\r\n                                        //縮尺\r\n                                        gltf.scene.scale.x = scale.x;\r\n                                        gltf.scene.scale.y = scale.y;\r\n                                        gltf.scene.scale.z = scale.z;\r\n                                        self_scene.add(gltf.scene);\r\n                                    }, \r\n                                    onProgress, onError\r\n                                );\r\n                            }else if(fileType == \"fbx\"){\r\n                                //fbxローダーで読み込む\r\n                                const loader = new FBXLoader();//inportしているコンポーネントをそのまま使う。\r\n                                loader.setPath( folderPath );\r\n                                loader.load( fileName, \r\n                                            function ( object:THREE.Object3D ) {\r\n                                                //回転(鉛直方向の時計回りにrotDeg回転)\r\n                                                object.rotation.y = (rotDeg / 90) * (Math.PI / 2),\r\n                                                //縮尺\r\n                                                object.scale.x = scale.x;\r\n                                                object.scale.y = scale.y;\r\n                                                object.scale.z = scale.z;\r\n                                                self_scene.add( object );\r\n                                            }, \r\n                                            onProgress, onError \r\n                                );\r\n                            }\r\n\r\n                            self_map = map;\r\n\r\n                            // use the Mapbox GL JS map canvas for three.js\r\n                            self_renderer = new THREE.WebGLRenderer({\r\n                                canvas: map.getCanvas(),\r\n                                context: gl,\r\n                                antialias: true\r\n                            });\r\n\r\n                            self_renderer.autoClear = false;\r\n                        },\r\n                        render: function (gl:WebGLRenderingContext, matrix:number[]) {\r\n                            const rotationX = new THREE.Matrix4().makeRotationAxis(\r\n                                new THREE.Vector3(1, 0, 0),\r\n                                modelTransform.rotateX\r\n                            );\r\n                            const rotationY = new THREE.Matrix4().makeRotationAxis(\r\n                                new THREE.Vector3(0, 1, 0),\r\n                                modelTransform.rotateY\r\n                            );\r\n                            const rotationZ = new THREE.Matrix4().makeRotationAxis(\r\n                                new THREE.Vector3(0, 0, 1),\r\n                                modelTransform.rotateZ\r\n                            );\r\n\r\n                            const m = new THREE.Matrix4().fromArray(matrix);\r\n                            const l = new THREE.Matrix4()\r\n                                .makeTranslation(\r\n                                    modelTransform.translateX,\r\n                                    modelTransform.translateY,\r\n                                    modelTransform.translateZ as number\r\n                                )\r\n                                .scale(\r\n                                    new THREE.Vector3(\r\n                                        modelTransform.scale,\r\n                                        -modelTransform.scale,\r\n                                        modelTransform.scale\r\n                                    )\r\n                                )\r\n                                .multiply(rotationX)\r\n                                .multiply(rotationY)\r\n                                .multiply(rotationZ);\r\n\r\n                            self_camera.projectionMatrix = m.multiply(l);\r\n                            self_renderer.resetState();\r\n\r\n                            self_renderer.render(self_scene, self_camera);\r\n                            self_map.triggerRepaint();\r\n                        }\r\n                    };\r\n\r\n                    map.addLayer(customLayer, 'waterway-label');\r\n                }\r\n                //GLTFのレイヤーを生成(bldgList.jsonを読み込む)\r\n                for(var i in bldgList.data){\r\n                    var bldg = bldgList.data[i];\r\n                    if(bldg.type == \"gltf\" || bldg.type == \"glb\"|| bldg.type == \"fbx\"){//gltfかfbxの場合\r\n                        createBldgLayer(bldg.type,bldg.lnglat, bldg.layerName, bldg.folderPath, bldg.filePath, \r\n                                        new THREE.Vector3(bldg.scale.x, bldg.scale.y, bldg.scale.z), bldg.rotDeg );\r\n                    }else{\r\n                        //alert('bldgList.jsonに対象外のタイプのファイル定義があります');\r\n                    }\r\n                }\r\n\r\n                //建物ボリュームを追加（geo.jsonで定義）\r\n                function createGeojsonBldgLayer():void{\r\n                    map.addSource('floorplan', {\r\n                        'type': 'geojson',\r\n                        /*\r\n                        * Each feature in this GeoJSON file contains values for\r\n                        * `properties.height`, `properties.base_height`,\r\n                        * and `properties.color`.\r\n                        * In `addLayer` you will use expressions to set the new\r\n                        * layer's paint properties based on these values.\r\n                        */\r\n                        'data': setting.geojsonPath //publicフォルダの公開ファイルを読み込み\r\n                    });\r\n                    map.addLayer({\r\n                        'id': 'room-extrusion',\r\n                        'type': 'fill-extrusion',\r\n                        'source': 'floorplan',\r\n                        'paint': {\r\n                        // Get the `fill-extrusion-color` from the source `color` property.\r\n                        'fill-extrusion-color': ['get', 'color'],\r\n                        \r\n                        // Get `fill-extrusion-height` from the source `height` property.\r\n                        'fill-extrusion-height': ['get', 'height'],\r\n                        \r\n                        // Get `fill-extrusion-base` from the source `base_height` property.\r\n                        'fill-extrusion-base': ['get', 'base_height'],\r\n                        \r\n                        // Make extrusions slightly opaque to see through indoor walls.\r\n                        'fill-extrusion-opacity': 0.5\r\n                        }\r\n                    });\r\n                }\r\n                if(setting.isCreateGeojsonBldgLayer){\r\n                    //設定によって呼ぶ場合と呼ばない場合を制御\r\n                    createGeojsonBldgLayer();\r\n                }\r\n\r\n            });\r\n\r\n            \r\n            //トライアル：建物の選択\r\n            //参考HP\r\n            //https://docs.mapbox.com/mapbox-gl-js/example/queryrenderedfeatures-around-point/\r\n\r\n            //'other-buildings'の更新//\r\n            map.on('click', (e: mapboxgl.MapMouseEvent & mapboxgl.EventData) => {\r\n                // Set `bbox` as 5px reactangle area around clicked point.\r\n                const bbox:[mapboxgl.Point, mapboxgl.Point] = [\r\n                    new mapboxgl.Point(e.point.x - 5, e.point.y - 5),\r\n                    new mapboxgl.Point(e.point.x + 5, e.point.y + 5)\r\n                ];\r\n                /*\r\n                if(!(bbox instanceof number[][])){\r\n                    return;//コンパイルエラー回避\r\n                }*/\r\n\r\n                // Find features intersecting the bounding box.\r\n                const selectedFeatures = map.queryRenderedFeatures(bbox, {\r\n                layers: ['other-buildings']\r\n                });\r\n                const ids = selectedFeatures.map(\r\n                    (feature) => feature.id\r\n                );\r\n\r\n                //1件以上選択できた場合のみ、親コンポーネントにIDを通知（main-buildingsレイヤーとother-buildingsレイヤーが両方動作しないように）\r\n                if(ids.length > 0){\r\n                    let tempSelectBldgids:Array<string> = [];//選択した建物IDを一時的に格納\r\n                    ids.forEach((value,idx)=>{\r\n                        if(value == undefined){\r\n                            return;\r\n                        }\r\n                        let tmpBldgId:string;\r\n                        if( (typeof value) == \"string\" ){\r\n                            //stringの場合\r\n                            tmpBldgId = value.toString();\r\n                        }else{\r\n                            tmpBldgId = String(value); \r\n                        } \r\n                        tempSelectBldgids.push(tmpBldgId);//リアクティブのイベントが１回だけ呼ばれるように、代入を１回にする。\r\n                    });\r\n                    state.selectBldgids = tempSelectBldgids;\r\n                    context.emit('uploadBldgId', state.selectBldgids);\r\n                }\r\n\r\n                //選択した建物に色付け(周辺建物)//\r\n                map.setFilter('other-buildings',\r\n                [\r\n                    'all',\r\n                    ['==', 'extrude', 'true'],\r\n                    ['>', 'height', 0],\r\n                    ['!in', '$id', ...hideBldgIds], //非表示建物は表示しない。\r\n                    ['!in', '$id', ...(props.highlightBldgIds as Array<number>)], //ハイライト建物を対象にする。\r\n                    ['in', '$id', ...(tgtBldgIds as Array<number>)],\r\n                    ['!in', '$id', ...ids]//選択したもの\r\n                ]\r\n                ,\r\n                );\r\n                map.setFilter('selected-other-building',\r\n                    ['in', '$id', ...ids]\r\n                );\r\n            });\r\n\r\n            //'main-buildings'の更新//\r\n            map.on('click', (e: mapboxgl.MapMouseEvent & mapboxgl.EventData) => {\r\n                // Set `bbox` as 5px reactangle area around clicked point.\r\n                const bbox:[mapboxgl.Point, mapboxgl.Point] = [\r\n                    new mapboxgl.Point(e.point.x - 5, e.point.y - 5),\r\n                    new mapboxgl.Point(e.point.x + 5, e.point.y + 5)\r\n                ];\r\n\r\n                // Find features intersecting the bounding box.\r\n                const selectedFeatures = map.queryRenderedFeatures(bbox, {\r\n                layers: ['main-buildings']\r\n                });\r\n                const ids = selectedFeatures.map(\r\n                    (feature) => feature.id\r\n                );\r\n\r\n                //1件以上選択できた場合のみ、親コンポーネントにIDを通知（main-buildingsレイヤーとother-buildingsレイヤーが両方動作しないように）\r\n                if(ids.length > 0){\r\n                    let tempSelectBldgids:Array<string> = [];//選択した建物IDを一時的に格納\r\n                    ids.forEach((value,idx)=>{\r\n                        if(value == undefined){\r\n                            return;\r\n                        }\r\n                        let tmpBldgId:string;\r\n                        if( (typeof value) == \"string\" ){\r\n                            //stringの場合\r\n                            tmpBldgId = value.toString();\r\n                        }else{\r\n                            tmpBldgId = String(value); \r\n                        } \r\n                        tempSelectBldgids.push(tmpBldgId);//リアクティブのイベントが１回だけ呼ばれるように、代入を１回にする。\r\n                    });\r\n                    state.selectBldgids = tempSelectBldgids;\r\n                    context.emit('uploadBldgId', state.selectBldgids);\r\n                }\r\n\r\n                //選択した建物に色付け(ハイライト建物)//\r\n                map.setFilter('main-buildings',\r\n                [\r\n                    'all',\r\n                    ['==', 'extrude', 'true'],\r\n                    ['>', 'height', 0],\r\n                    ['!in', '$id', ...hideBldgIds], //非表示建物は表示しない。\r\n                    ['in', '$id', ...(props.highlightBldgIds as Array<number>)], //ハイライト建物を対象にする。\r\n                    ['!in', '$id', ...ids]//選択したもの\r\n                ]\r\n                ,\r\n                );\r\n                map.setFilter('selected-main-building',\r\n                    ['in', '$id', ...ids]\r\n                );\r\n            });\r\n\r\n            //建物IDを確認するためのデバッグ用の関数\r\n            if(debug){\r\n                //イベントハンドルを実装\r\n                map.on('click', (e: mapboxgl.MapMouseEvent & mapboxgl.EventData) => {\r\n                    // Set `bbox` as 5px reactangle area around clicked point.\r\n                    const bbox:[mapboxgl.Point, mapboxgl.Point] = [\r\n                        new mapboxgl.Point(e.point.x - 5, e.point.y - 5),\r\n                        new mapboxgl.Point(e.point.x + 5, e.point.y + 5)\r\n                    ];\r\n\r\n                    // Find features intersecting the bounding box.\r\n                    const selectedFeatures = map.queryRenderedFeatures(bbox, {\r\n                        layers: ['not-related-building']\r\n                    });\r\n                    const ids = selectedFeatures.map(\r\n                        (feature) => feature.id\r\n                    );\r\n\r\n                    //1件以上選択できた場合のみ、親コンポーネントにIDを通知（main-buildingsレイヤーとother-buildingsレイヤーが両方動作しないように）\r\n                    if(ids.length > 0){\r\n                        alert('建物情報がない建物が選択されました。（選択した建物のID：' + ids);\r\n                    }\r\n                });\r\n            }\r\n                \r\n            firstFlg = false\r\n\r\n            function UpdateHighlightBuildings(){\r\n                if (!firstFlg){\r\n                    map.setFilter('main-buildings', [\r\n                        'all',\r\n                        ['==', 'extrude', 'true'],\r\n                        ['>', 'height', 0],\r\n                        ['!in', '$id', ...hideBldgIds], //非表示建物は表示しない。（KKE新館部分）\r\n                        ['in', '$id', ...(props.highlightBldgIds as Array<number>)] //ハイライト建物を対象にする。\r\n                    ]);\r\n                    map.setFilter('other-buildings',  [\r\n                        'all',\r\n                        ['==', 'extrude', 'true'],\r\n                        ['>', 'height', 0],\r\n                        ['!in', '$id', ...hideBldgIds],\r\n                        ['!in', '$id', ...(props.highlightBldgIds as Array<number>)], //ハイライト建物を対象にする。\r\n                        ['in', '$id', ...(tgtBldgIds as Array<number>)]\r\n                    ]);\r\n                }\r\n            }\r\n        });\r\n\r\n        return{\r\n            state,\r\n            increment\r\n        }\r\n    },\r\n});\r\n","import { render } from \"./Map.vue?vue&type=template&id=240df5f9&scoped=true&ts=true\"\nimport script from \"./Map.vue?vue&type=script&lang=ts\"\nexport * from \"./Map.vue?vue&type=script&lang=ts\"\n\nimport \"./Map.vue?vue&type=style&index=0&id=240df5f9&scoped=true&lang=css\"\n\nimport exportComponent from \"C:\\\\project_git\\\\CityGML\\\\map_publish1\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-240df5f9\"]])\n\nexport default __exports__","import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-4a85d836\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \"◆店舗情報\", -1))\nconst _hoisted_2 = { class: \"wrapper\" }\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_BarChart = _resolveComponent(\"BarChart\")!\n\n  return (_openBlock(), _createElementBlock(\"div\", null, [\n    _hoisted_1,\n    _createElementVNode(\"p\", null, \"店舗名: \" + _toDisplayString(_ctx.state.bldgName), 1),\n    _createElementVNode(\"p\", null, \"住所: \" + _toDisplayString(_ctx.state.bldgAddress), 1),\n    _createElementVNode(\"p\", null, [\n      _createElementVNode(\"button\", {\n        onClick: _cache[0] || (_cache[0] = \n//@ts-ignore\n(...args) => (_ctx.showWebPage && _ctx.showWebPage(...args)))\n      }, \"ホームページ表示\")\n    ]),\n    _createElementVNode(\"div\", _hoisted_2, [\n      _createVNode(_component_BarChart, {\n        chartData: _ctx.state.barData\n      }, null, 8, [\"chartData\"])\n    ])\n  ]))\n}","\r\n\r\nimport { Chart, ChartData, registerables } from \"chart.js\";\r\nimport { defineComponent, effect, reactive } from \"vue\";\r\nimport { BarChart } from \"vue-chart-3\";\r\nimport data from '../assets/TestData.json';\r\n\r\nlet Timedat:Array<string>=[];\r\nlet ppldat:Array<number>=[];\r\n\r\n// 使用するモジュールの宣言\r\n// ここでは便宜上、全てのモジュールを使用する registerables を使用しているが、\r\n// 必要十分なモジュールのみを宣言することで、ツリーシェイキングを行うことができる\r\nChart.register(...registerables);\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    BarChart\r\n  },\r\n  //パラメータ（親コンポーネントから渡るもの）\r\n  props: {\r\n      //(1)選択した建物のIDのリストが渡ってくる\r\n      selectBldgids:Array\r\n  },\r\n\r\n//created is called at the begining of program. OnStartup()と同じ\r\n  created(){\r\n      //特になにもしない。\r\n    },\r\n  setup(props, context) {    \r\n    //data定義\r\n    const state = reactive<{barData: ChartData<\"bar\">, bldgName:string, bldgAddress:string, bldgInfoUrl:string}>({\r\n        barData: {\r\n          labels:[], //use time data from array\r\n          datasets:[\r\n              {\r\n                  label:\"来店人数\",\r\n                  data:[], //use people data from array\r\n                  backgroundColor: ['rgba(54, 162, 235)'],\r\n              },\r\n          ],\r\n        },//グラフのデータ\r\n            //表示する建物情報\r\n        bldgName : \"\",\r\n        bldgAddress : \"\",\r\n        bldgInfoUrl : \"\"\r\n    });\r\n\r\n    //propの建物IDが変更されたら、barDataを更新\r\n    effect(() => {\r\n        if( (props.selectBldgids as Array<number>).length > 0) {\r\n           state.barData = createBarChartData( (props.selectBldgids as Array<number>)[0] );\r\n           state.bldgName = getBldgName( (props.selectBldgids as Array<number>)[0] );\r\n           state.bldgAddress = getBldgAddress( (props.selectBldgids as Array<number>)[0] );\r\n           state.bldgInfoUrl = getBldgInfoUrl( (props.selectBldgids as Array<number>)[0] );\r\n        }\r\n    })\r\n\r\n    //建物名を生成する関数\r\n    function getBldgName(buildingId:number):string {\r\n        //データを更新\r\n        for(var i in data.BuildingInfo){\r\n          var bldg = data.BuildingInfo[i]\r\n          if(bldg.BuildingID != String(buildingId)){\r\n            //building idで絞り込む\r\n            continue;//対象以外のデータは、スキップする\r\n          }\r\n          return bldg.Name;\r\n        }\r\n        return \"notFound\";\r\n    }\r\n\r\n    //住所を生成する関数\r\n    function getBldgAddress(buildingId:number):string {\r\n        //データを更新\r\n        for(var i in data.BuildingInfo){\r\n          var bldg = data.BuildingInfo[i]\r\n          if(bldg.BuildingID != String(buildingId)){\r\n            //building idで絞り込む\r\n            continue;//対象以外のデータは、スキップする\r\n          }\r\n          return bldg.Address;\r\n        }\r\n        return \"notFound\";\r\n    }\r\n\r\n    //建物のホームページのURLを生成する関数\r\n    function getBldgInfoUrl(buildingId:number):string {\r\n        //データを更新\r\n        for(var i in data.BuildingInfo){\r\n          var bldg = data.BuildingInfo[i]\r\n          if(bldg.BuildingID != String(buildingId)){\r\n            //building idで絞り込む\r\n            continue;//対象以外のデータは、スキップする\r\n          }\r\n          return bldg.InfoUrl;\r\n        }\r\n        return \"notFound\";\r\n    }\r\n\r\n    //bar dataを生成する関数\r\n    function createBarChartData(buildingId:number):ChartData<\"bar\"> {\r\n      //グラフの値を更新\r\n      {\r\n        //初期化\r\n        Timedat =[];\r\n        ppldat = [];\r\n        \r\n        //データを更新\r\n        for(var i in data.BuildingInfo){\r\n          if(data.BuildingInfo[i].BuildingID != String(buildingId)){\r\n            //building idで絞り込む\r\n            continue;//対象以外のデータは、スキップする\r\n          }\r\n          for(var j in data.BuildingInfo[i].Space.PeopleCount)\r\n            {\r\n              // Add time data to array\r\n            Timedat.push(data.BuildingInfo[i].Space.PeopleCount[j].Time);\r\n            //add people data to array\r\n            ppldat.push(Number(data.BuildingInfo[i].Space.PeopleCount[j].TimeValue));\r\n          } \r\n        }\r\n        if(Timedat.length == 0){\r\n          //データがある建物が選択されていないため、警告メッセージ\r\n          alert(\"TestData.jsonにデータのある建物を選択してください。選択された建物のID：\" + buildingId);\r\n        }\r\n      }\r\n\r\n      var rtnBarData:ChartData<\"bar\">={\r\n        labels:Timedat, //use time data from array\r\n        datasets:[\r\n            {\r\n                label:\"来店人数\",\r\n                data:ppldat, //use people data from array\r\n                backgroundColor: ['rgba(54, 162, 235)'],\r\n            },\r\n        ],\r\n      };   \r\n\r\n      return rtnBarData;\r\n    }\r\n\r\n    //methodの定義\r\n    /**\r\n     * 建物のページを開く\r\n     */\r\n    const showWebPage =():void =>{\r\n        window.open(state.bldgInfoUrl);\r\n    };\r\n\r\n\r\n    return { \r\n      state,\r\n      showWebPage\r\n    };\r\n  },\r\n })\r\n\r\n\r\n","import { render } from \"./TestChart.vue?vue&type=template&id=4a85d836&scoped=true&ts=true\"\nimport script from \"./TestChart.vue?vue&type=script&lang=ts\"\nexport * from \"./TestChart.vue?vue&type=script&lang=ts\"\n\nimport \"./TestChart.vue?vue&type=style&index=0&id=4a85d836&scoped=true&lang=css\"\n\nimport exportComponent from \"C:\\\\project_git\\\\CityGML\\\\map_publish1\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-4a85d836\"]])\n\nexport default __exports__","<template>\r\n    <div>\r\n        <h1>◆開店店舗表示</h1>\r\n        入力した時間帯にずっと空いている店舗が分かります。\r\n        <ul>\r\n            <select name=\"startTime\" @change=\"GetStartTime($event)\">\r\n                <option value=\"-\" selected>--:--</option>\r\n                <option value=\"1700\">17:00</option>\r\n                <option value=\"1800\">18:00</option>\r\n                <option value=\"1900\">19:00</option>\r\n                <option value=\"2000\">20:00</option>\r\n                <option value=\"2100\">21:00</option>\r\n                <option value=\"2200\">22:00</option>\r\n                <option value=\"2300\">23:00</option>\r\n                <option value=\"2400\">24:00</option>\r\n            </select>\r\n            ～\r\n            <select name=\"endTime\" @change=\"GetEndTime($event)\">\r\n                <option value=\"-\" selected>--:--</option>\r\n                <option value=\"1800\">18:00</option>\r\n                <option value=\"1900\">19:00</option>\r\n                <option value=\"2000\">20:00</option>\r\n                <option value=\"2100\">21:00</option>\r\n                <option value=\"2200\">22:00</option>\r\n                <option value=\"2300\">23:00</option>\r\n                <option value=\"2400\">24:00</option>\r\n            </select>\r\n        </ul>\r\n    </div>\r\n</template>map\r\n<script>\r\nimport data from '../assets/TestData.json';\r\nimport { defineComponent, toRefs } from 'vue';\r\n\r\nexport default defineComponent({\r\n    emits:['openBldgId'],\r\n    name:\"Test\",\r\n        props: {\r\n        //(1)ハイライト表示する建物のIDのリストが渡ってくる\r\n        highlightBldgIds:Array,\r\n        startTime: String,\r\n        endTime: String\r\n    },\r\n\r\n    setup(props, context) {\r\n        var {startTime} = toRefs(props);\r\n        startTime = \"-\";\r\n        var {endTime} = toRefs(props);\r\n        endTime = \"-\";\r\n\r\n        function GetStartTime(e){\r\n            startTime = e.target.value;\r\n            if (endTime != \"-\"){\r\n                TestFunction();\r\n            }\r\n        }\r\n\r\n        function GetEndTime(e){\r\n            endTime = e.target.value;\r\n            if (startTime != \"-\"){\r\n                TestFunction();\r\n            }\r\n        }\r\n\r\n        function TestFunction(){\r\n                const highlightBldgIds = [];\r\n                for (const i in data.BuildingInfo){\r\n                    if (parseInt(data.BuildingInfo[i].Space.BusinessStartTime) <= parseInt(startTime) \r\n                        && parseInt(data.BuildingInfo[i].Space.BusinessEndTime) >= parseInt(endTime)){\r\n                        var buildingId = parseInt(data.BuildingInfo[i].BuildingID);\r\n                        highlightBldgIds.push(buildingId);\r\n                    }\r\n                context.emit('openBldgId', highlightBldgIds);\r\n                }\r\n            }\r\n\r\n        return{\r\n            GetStartTime,\r\n            GetEndTime,\r\n            TestFunction\r\n        }\r\n    }\r\n});\r\n</script>\r\n\r\n<style scoped>\r\ndiv{\r\n    border: 1pt solid orange\r\n}\r\nh1{\r\n    color: orange\r\n}\r\np{\r\n    color: orange\r\n}\r\n</style>\r\n\r\n\r\n","import { render } from \"./BusinessHourDisp.vue?vue&type=template&id=093dfefa&scoped=true\"\nimport script from \"./BusinessHourDisp.vue?vue&type=script&lang=js\"\nexport * from \"./BusinessHourDisp.vue?vue&type=script&lang=js\"\n\nimport \"./BusinessHourDisp.vue?vue&type=style&index=0&id=093dfefa&scoped=true&lang=css\"\n\nimport exportComponent from \"C:\\\\project_git\\\\CityGML\\\\map_publish1\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-093dfefa\"]])\n\nexport default __exports__","import { render } from \"./App.vue?vue&type=template&id=344b00b7\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"C:\\\\project_git\\\\CityGML\\\\map_publish1\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { createApp } from 'vue'\nimport App from './App.vue'\n\n//bootstrap-vue\nimport 'bootstrap/dist/css/bootstrap.css' //add\nimport 'bootstrap-vue/dist/bootstrap-vue.css' //add\n\nconst app = createApp(App)\napp.mount('#app')\n\n"],"sourceRoot":""}